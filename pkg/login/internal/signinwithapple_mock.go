// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/apple/signinwithapple.go

// Package internal is a generated GoMock package.
package internal

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/soapboxsocial/soapbox/pkg/apple"
	reflect "reflect"
)

// MockSignInWithApple is a mock of SignInWithApple interface
type MockSignInWithApple struct {
	ctrl     *gomock.Controller
	recorder *MockSignInWithAppleMockRecorder
}

// MockSignInWithAppleMockRecorder is the mock recorder for MockSignInWithApple
type MockSignInWithAppleMockRecorder struct {
	mock *MockSignInWithApple
}

// NewMockSignInWithApple creates a new mock instance
func NewMockSignInWithApple(ctrl *gomock.Controller) *MockSignInWithApple {
	mock := &MockSignInWithApple{ctrl: ctrl}
	mock.recorder = &MockSignInWithAppleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignInWithApple) EXPECT() *MockSignInWithAppleMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockSignInWithApple) Validate(jwt string) (*apple.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", jwt)
	ret0, _ := ret[0].(*apple.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockSignInWithAppleMockRecorder) Validate(jwt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSignInWithApple)(nil).Validate), jwt)
}
