// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomServiceClient interface {
	// Get a room specified by the ID.
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	// List all the currently open rooms.
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	// Close a room.
	CloseRoom(ctx context.Context, in *CloseRoomRequest, opts ...grpc.CallOption) (*CloseRoomResponse, error)
	// Registers a welcome room on the server and returns its ID.
	RegisterWelcomeRoom(ctx context.Context, in *RegisterWelcomeRoomRequest, opts ...grpc.CallOption) (*RegisterWelcomeRoomResponse, error)
	// Checks if users can join a room.
	FilterUsersThatCanJoin(ctx context.Context, in *FilterUsersThatCanJoinRequest, opts ...grpc.CallOption) (*FilterUsersThatCanJoinResponse, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, "/soapbox.v1.RoomService/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, "/soapbox.v1.RoomService/ListRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CloseRoom(ctx context.Context, in *CloseRoomRequest, opts ...grpc.CallOption) (*CloseRoomResponse, error) {
	out := new(CloseRoomResponse)
	err := c.cc.Invoke(ctx, "/soapbox.v1.RoomService/CloseRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RegisterWelcomeRoom(ctx context.Context, in *RegisterWelcomeRoomRequest, opts ...grpc.CallOption) (*RegisterWelcomeRoomResponse, error) {
	out := new(RegisterWelcomeRoomResponse)
	err := c.cc.Invoke(ctx, "/soapbox.v1.RoomService/RegisterWelcomeRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) FilterUsersThatCanJoin(ctx context.Context, in *FilterUsersThatCanJoinRequest, opts ...grpc.CallOption) (*FilterUsersThatCanJoinResponse, error) {
	out := new(FilterUsersThatCanJoinResponse)
	err := c.cc.Invoke(ctx, "/soapbox.v1.RoomService/FilterUsersThatCanJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility
type RoomServiceServer interface {
	// Get a room specified by the ID.
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	// List all the currently open rooms.
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	// Close a room.
	CloseRoom(context.Context, *CloseRoomRequest) (*CloseRoomResponse, error)
	// Registers a welcome room on the server and returns its ID.
	RegisterWelcomeRoom(context.Context, *RegisterWelcomeRoomRequest) (*RegisterWelcomeRoomResponse, error)
	// Checks if users can join a room.
	FilterUsersThatCanJoin(context.Context, *FilterUsersThatCanJoinRequest) (*FilterUsersThatCanJoinResponse, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (UnimplementedRoomServiceServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoomServiceServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedRoomServiceServer) CloseRoom(context.Context, *CloseRoomRequest) (*CloseRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseRoom not implemented")
}
func (UnimplementedRoomServiceServer) RegisterWelcomeRoom(context.Context, *RegisterWelcomeRoomRequest) (*RegisterWelcomeRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWelcomeRoom not implemented")
}
func (UnimplementedRoomServiceServer) FilterUsersThatCanJoin(context.Context, *FilterUsersThatCanJoinRequest) (*FilterUsersThatCanJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterUsersThatCanJoin not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.v1.RoomService/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.v1.RoomService/ListRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CloseRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CloseRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.v1.RoomService/CloseRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CloseRoom(ctx, req.(*CloseRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RegisterWelcomeRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWelcomeRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RegisterWelcomeRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.v1.RoomService/RegisterWelcomeRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RegisterWelcomeRoom(ctx, req.(*RegisterWelcomeRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_FilterUsersThatCanJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterUsersThatCanJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).FilterUsersThatCanJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.v1.RoomService/FilterUsersThatCanJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).FilterUsersThatCanJoin(ctx, req.(*FilterUsersThatCanJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soapbox.v1.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoom",
			Handler:    _RoomService_GetRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _RoomService_ListRooms_Handler,
		},
		{
			MethodName: "CloseRoom",
			Handler:    _RoomService_CloseRoom_Handler,
		},
		{
			MethodName: "RegisterWelcomeRoom",
			Handler:    _RoomService_RegisterWelcomeRoom_Handler,
		},
		{
			MethodName: "FilterUsersThatCanJoin",
			Handler:    _RoomService_FilterUsersThatCanJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soapbox/v1/room_api.proto",
}
